# Generated by Django 4.0.2 on 2022-03-31 01:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import miq.core.mixins
import miq.core.models.file
import miq.core.models.image
import miq.core.models.setting
import miq.core.models.user
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('username', models.CharField(error_messages={'min_length': 'This username is too short. (4 characters minimum)', 'unique': 'This username is taken.'}, help_text='Required. 150 characters or fewer. Letters, digits and ./_ only.', max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(4, message='This username is too short. (4 characters minimum)')], verbose_name='Username')),
                ('first_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2, message='Enter your first name.')], verbose_name='First name')),
                ('last_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2, message='Enter your last name.')], verbose_name='Last name')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other')], default='OTHER', max_length=50, verbose_name='Gender')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', miq.core.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('src', models.ImageField(help_text='Select an image file', max_length=500, upload_to=miq.core.models.image.upload_to, verbose_name='Source')),
                ('src_mobile', models.ImageField(blank=True, help_text='Select an image file', max_length=500, null=True, upload_to=miq.core.models.image.upload_thumb_to, verbose_name='Source mobile')),
                ('thumb_sq', models.ImageField(blank=True, help_text='Select an image file', max_length=500, null=True, upload_to=miq.core.models.image.upload_thumb_to, verbose_name='Square Thumbnail')),
                ('thumb', models.ImageField(blank=True, help_text='Select an image file', max_length=500, null=True, upload_to=miq.core.models.image.upload_thumb_to, verbose_name='Thumbnail')),
                ('caption', models.CharField(blank=True, max_length=400)),
                ('alt_text', models.CharField(blank=True, max_length=400)),
                ('is_active', models.BooleanField(default=True)),
                ('position', models.PositiveIntegerField(default=1)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='sites.site')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'ordering': ('position', '-updated', '-created'),
            },
            bases=(miq.core.mixins.RendererMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, help_text='Call to action or link url', null=True)),
                ('source', models.SlugField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(choices=[('TXT', 'Text'), ('MD', 'Markdown'), ('IMG', 'Image'), ('HGAL', 'Horizontal gallery'), ('VGAL', 'Vertical gallery'), ('SQGRID', 'Square grid'), ('JUMB', 'Jumbotron'), ('SLIDER', 'Slider'), ('EMBED', 'Embed')], default='TXT', max_length=15)),
                ('html', models.TextField(blank=True, null=True)),
                ('nodes', models.JSONField(blank=True, null=True)),
                ('position', models.PositiveIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'ordering': ('created', 'position'),
            },
            bases=(miq.core.mixins.RendererMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('contact_number', models.CharField(blank=True, help_text='Preferred contact number', max_length=20, null=True)),
                ('contact_number_display', models.CharField(blank=True, max_length=99, null=True, verbose_name='Contact number')),
                ('contact_number_title', models.CharField(blank=True, max_length=99, null=True, verbose_name='Contact number description')),
                ('contact_email', models.EmailField(blank=True, help_text='Preferred contact email', max_length=99, null=True)),
                ('whatsapp_link', models.URLField(blank=True, null=True, verbose_name='Whatsapp link')),
                ('whatsapp_link_title', models.CharField(blank=True, max_length=99, null=True, verbose_name='Whatsapp link description')),
                ('is_live', models.BooleanField(default=False, help_text='Turn off to prevent access to your website')),
                ('ico_link', models.URLField(blank=True, null=True, verbose_name='Favicon link')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About us')),
                ('faq', models.TextField(blank=True, null=True, verbose_name='Frequently Asked Questions')),
                ('terms', models.TextField(blank=True, null=True, verbose_name='About us')),
                ('privacy', models.TextField(blank=True, null=True, verbose_name='About us')),
                ('ct_title', models.CharField(blank=True, max_length=200, null=True)),
                ('ct_text', models.TextField(blank=True, null=True)),
                ('ct_html', models.TextField(blank=True, null=True)),
                ('ga_tracking', models.TextField(blank=True, help_text='Google Analytics Measurement ID', null=True, verbose_name='Google Analytics Tracking ID')),
                ('fb_pixel', models.TextField(blank=True, help_text='Facebook Pixel ID', null=True, verbose_name='Facebook Pixel ID')),
                ('fb_app_id', models.CharField(blank=True, max_length=500, null=True, verbose_name='Facebook App ID')),
                ('fb_app_secret', models.CharField(blank=True, max_length=500, null=True, verbose_name='Facebook App Secret')),
                ('config', models.JSONField(blank=True, default=miq.core.models.setting.setting_config_dict)),
                ('ct_image', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site_setting', to='core.image', verbose_name='Close Image')),
                ('logo', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.image', verbose_name='Logo')),
                ('site', models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='sites.site')),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SectionImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, help_text='Call to action or link url', null=True)),
                ('img', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='core.image')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.section')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='section',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='sections', through='core.SectionImage', to='core.Image'),
        ),
        migrations.AddField(
            model_name='section',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='sites.site'),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('title', models.CharField(blank=True, help_text='Page Meta title', max_length=250, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('label', models.CharField(help_text='Page header label', max_length=100)),
                ('meta_slug', models.SlugField(default=uuid.uuid4, max_length=100, unique=True)),
                ('is_published', models.BooleanField(default=False, help_text='Publish this page')),
                ('dt_published', models.DateTimeField(blank=True, help_text='Publication date', null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.page')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='sites.site')),
            ],
            options={
                'verbose_name': 'Page',
                'verbose_name_plural': 'Page',
                'ordering': ('-created', '-updated'),
            },
        ),
        migrations.CreateModel(
            name='Index',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('title', models.CharField(blank=True, help_text='Page Meta title', max_length=250, null=True)),
                ('cover', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.image', verbose_name='Cover')),
                ('sections', models.ManyToManyField(blank=True, related_name='index', to='core.Section')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='index', to='sites.site')),
            ],
            options={
                'verbose_name': 'Index page',
                'verbose_name_plural': 'Index page',
                'ordering': ('-created', '-updated'),
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid4, editable=False, max_length=100, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('source_app', models.CharField(blank=True, db_index=True, editable=False, max_length=150, null=True, verbose_name='Source application')),
                ('src', models.FileField(help_text='Select a file', max_length=500, upload_to=miq.core.models.file.upload_to, verbose_name='File')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='sites.site')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
                'ordering': ('-created', '-updated'),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='img',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_pic', to='core.image', verbose_name='Profile picture'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='ImageSection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.section',),
        ),
        migrations.CreateModel(
            name='JumbotronSection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.section',),
        ),
        migrations.CreateModel(
            name='MarkdownSection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.section',),
        ),
        migrations.CreateModel(
            name='TextSection',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.section',),
        ),
    ]
